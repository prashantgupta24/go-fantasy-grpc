// Code generated by MockGen. DO NOT EDIT.
// Source: fpl/server/types.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	grpc "github.com/go-fantasy/fpl/grpc"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockFPLServer is a mock of FPLServer interface
type MockFPLServer struct {
	ctrl     *gomock.Controller
	recorder *MockFPLServerMockRecorder
}

// MockFPLServerMockRecorder is the mock recorder for MockFPLServer
type MockFPLServerMockRecorder struct {
	mock *MockFPLServer
}

// NewMockFPLServer creates a new mock instance
func NewMockFPLServer(ctrl *gomock.Controller) *MockFPLServer {
	mock := &MockFPLServer{ctrl: ctrl}
	mock.recorder = &MockFPLServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFPLServer) EXPECT() *MockFPLServerMockRecorder {
	return m.recorder
}

// GetNumberOfPlayers mocks base method
func (m *MockFPLServer) GetNumberOfPlayers(arg0 context.Context, arg1 *grpc.NumPlayerRequest) (*grpc.NumPlayers, error) {
	ret := m.ctrl.Call(m, "GetNumberOfPlayers", arg0, arg1)
	ret0, _ := ret[0].(*grpc.NumPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfPlayers indicates an expected call of GetNumberOfPlayers
func (mr *MockFPLServerMockRecorder) GetNumberOfPlayers(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfPlayers", reflect.TypeOf((*MockFPLServer)(nil).GetNumberOfPlayers), arg0, arg1)
}

// GetParticipantsInLeague mocks base method
func (m *MockFPLServer) GetParticipantsInLeague(arg0 context.Context, arg1 *grpc.LeagueCode) (*grpc.NumParticipants, error) {
	ret := m.ctrl.Call(m, "GetParticipantsInLeague", arg0, arg1)
	ret0, _ := ret[0].(*grpc.NumParticipants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantsInLeague indicates an expected call of GetParticipantsInLeague
func (mr *MockFPLServerMockRecorder) GetParticipantsInLeague(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantsInLeague", reflect.TypeOf((*MockFPLServer)(nil).GetParticipantsInLeague), arg0, arg1)
}

// GetDataForGameweek mocks base method
func (m *MockFPLServer) GetDataForGameweek(arg0 context.Context, arg1 *grpc.GameweekReq) (*grpc.PlayerOccuranceData, error) {
	ret := m.ctrl.Call(m, "GetDataForGameweek", arg0, arg1)
	ret0, _ := ret[0].(*grpc.PlayerOccuranceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataForGameweek indicates an expected call of GetDataForGameweek
func (mr *MockFPLServerMockRecorder) GetDataForGameweek(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataForGameweek", reflect.TypeOf((*MockFPLServer)(nil).GetDataForGameweek), arg0, arg1)
}

// GetDataForAllGameweeks mocks base method
func (m *MockFPLServer) GetDataForAllGameweeks(arg0 *grpc.LeagueCode, arg1 grpc.FPL_GetDataForAllGameweeksServer) error {
	ret := m.ctrl.Call(m, "GetDataForAllGameweeks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDataForAllGameweeks indicates an expected call of GetDataForAllGameweeks
func (mr *MockFPLServerMockRecorder) GetDataForAllGameweeks(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataForAllGameweeks", reflect.TypeOf((*MockFPLServer)(nil).GetDataForAllGameweeks), arg0, arg1)
}

// Start mocks base method
func (m *MockFPLServer) Start(arg0 string) error {
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockFPLServerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFPLServer)(nil).Start), arg0)
}

// MakeRequest mocks base method
func (m *MockFPLServer) MakeRequest(arg0 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "MakeRequest", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRequest indicates an expected call of MakeRequest
func (mr *MockFPLServerMockRecorder) MakeRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockFPLServer)(nil).MakeRequest), arg0)
}

// GetPlayerOccurances mocks base method
func (m *MockFPLServer) GetPlayerOccurances() map[int]map[string]int {
	ret := m.ctrl.Call(m, "GetPlayerOccurances")
	ret0, _ := ret[0].(map[int]map[string]int)
	return ret0
}

// GetPlayerOccurances indicates an expected call of GetPlayerOccurances
func (mr *MockFPLServerMockRecorder) GetPlayerOccurances() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerOccurances", reflect.TypeOf((*MockFPLServer)(nil).GetPlayerOccurances))
}

// GetPlayerMap mocks base method
func (m *MockFPLServer) GetPlayerMap() map[int64]string {
	ret := m.ctrl.Call(m, "GetPlayerMap")
	ret0, _ := ret[0].(map[int64]string)
	return ret0
}

// GetPlayerMap indicates an expected call of GetPlayerMap
func (mr *MockFPLServerMockRecorder) GetPlayerMap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerMap", reflect.TypeOf((*MockFPLServer)(nil).GetPlayerMap))
}
