// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-fantasy/fpl/grpc (interfaces: FPLClient)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	grpc "github.com/go-fantasy/fpl/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	reflect "reflect"
)

// MockFPLClient is a mock of FPLClient interface
type MockFPLClient struct {
	ctrl     *gomock.Controller
	recorder *MockFPLClientMockRecorder
}

// MockFPLClientMockRecorder is the mock recorder for MockFPLClient
type MockFPLClientMockRecorder struct {
	mock *MockFPLClient
}

// NewMockFPLClient creates a new mock instance
func NewMockFPLClient(ctrl *gomock.Controller) *MockFPLClient {
	mock := &MockFPLClient{ctrl: ctrl}
	mock.recorder = &MockFPLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFPLClient) EXPECT() *MockFPLClientMockRecorder {
	return m.recorder
}

// GetDataForAllGameweeks mocks base method
func (m *MockFPLClient) GetDataForAllGameweeks(arg0 context.Context, arg1 *grpc.LeagueCode, arg2 ...grpc0.CallOption) (grpc.FPL_GetDataForAllGameweeksClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataForAllGameweeks", varargs...)
	ret0, _ := ret[0].(grpc.FPL_GetDataForAllGameweeksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataForAllGameweeks indicates an expected call of GetDataForAllGameweeks
func (mr *MockFPLClientMockRecorder) GetDataForAllGameweeks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataForAllGameweeks", reflect.TypeOf((*MockFPLClient)(nil).GetDataForAllGameweeks), varargs...)
}

// GetDataForGameweek mocks base method
func (m *MockFPLClient) GetDataForGameweek(arg0 context.Context, arg1 *grpc.GameweekReq, arg2 ...grpc0.CallOption) (*grpc.PlayerOccuranceData, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataForGameweek", varargs...)
	ret0, _ := ret[0].(*grpc.PlayerOccuranceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataForGameweek indicates an expected call of GetDataForGameweek
func (mr *MockFPLClientMockRecorder) GetDataForGameweek(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataForGameweek", reflect.TypeOf((*MockFPLClient)(nil).GetDataForGameweek), varargs...)
}

// GetNumberOfPlayers mocks base method
func (m *MockFPLClient) GetNumberOfPlayers(arg0 context.Context, arg1 *grpc.NumPlayerRequest, arg2 ...grpc0.CallOption) (*grpc.NumPlayers, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumberOfPlayers", varargs...)
	ret0, _ := ret[0].(*grpc.NumPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfPlayers indicates an expected call of GetNumberOfPlayers
func (mr *MockFPLClientMockRecorder) GetNumberOfPlayers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfPlayers", reflect.TypeOf((*MockFPLClient)(nil).GetNumberOfPlayers), varargs...)
}

// GetParticipantsInLeague mocks base method
func (m *MockFPLClient) GetParticipantsInLeague(arg0 context.Context, arg1 *grpc.LeagueCode, arg2 ...grpc0.CallOption) (*grpc.NumParticipants, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParticipantsInLeague", varargs...)
	ret0, _ := ret[0].(*grpc.NumParticipants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantsInLeague indicates an expected call of GetParticipantsInLeague
func (mr *MockFPLClientMockRecorder) GetParticipantsInLeague(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantsInLeague", reflect.TypeOf((*MockFPLClient)(nil).GetParticipantsInLeague), varargs...)
}
